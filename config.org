* TODO [0/7]
- [ ] Add my old region moving keybindings
- [ ] paredit
- [ ] M-n and M-p to move next/prev like region
- [ ] always kill current buffer (stop asking me which one)
- [ ] C-x C-b switch to other buffer automatically

* Looks

** Resets

Remove useless interface

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

Mainly to allow frame resizing with mouse-drag

#+BEGIN_SRC emacs-lisp
  (xterm-mouse-mode 1)
#+END_SRC

[[https://github.com/bbatsov/solarized-emacs/issues/187][Solves uggly modeline underline]]

#+BEGIN_SRC emacs-lisp
  (setq x-underline-at-descent-line t)
#+END_SRC

** Theme

Light solarized, in sync with my kitty and kitsune config

#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :ensure t
    :init
    (setq solarized-distinct-fringe-background t
          solarized-high-contrast-mode-line t
          solarized-use-more-italic t
          solarized-scale-org-headlines t)
    :config
    (load-theme 'solarized-light t))
#+END_SRC

** Cursor looks

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
  (blink-cursor-mode -1)
  (setq-default cursor-type '(bar . 3))
  (set-cursor-color "#ff8676")

  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1)
    :config
    (setq beacon-color "#f8a53a"))
#+END_SRC

*** TODO [0/2]:
- [ ] [[https://emacs.stackexchange.com/questions/13291][fix cursor color when launching from daemon]]
- [ ] [[https://github.com/tonsky/FiraCode/wiki/Emacs-instructions][set fira code pretty-symbols ligatures]]

* Global Feels
** Resets

Do not welcome me, do not back me up, do not save me, do not ring me
But do tell me where I am

#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t
        make-backup-files     nil
        auto-save-default     nil
        ring-bell-function    'ignore
        column-number-mode    t)
#+END_SRC

Don't know why anyone would default to 8 spaces
Default to indent with spaces

#+BEGIN_SRC emacs-lisp
  (setq-default
   case-fold-search t
   column-number-mode t
   delete-selection-mode t
   tab-width 4
   indent-tabs-mode nil
   scroll-preserve-screen-position 'always
   truncate-lines nil
   truncate-partial-width-windows nil)

#+END_SRC

Don't need to type full 'yes' or 'no' for confirmation

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Don't jump when scrolling with cursor

#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

** Terminal

Call Bash with same keybinding as kitty

#+BEGIN_SRC emacs-lisp
  (use-package ansi-term
    :no-require t
    :bind ("<C-S-return>" . ansi-term)
    :init
    (defvar my-term-shell "/bin/bash")
    (defadvice ansi-term (before force-bash)
      (interactive (list my-term-shell)))
    (ad-activate 'ansi-term))
#+END_SRC

** Modes

Show keybind help

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC

Share kill ring with x applications

#+BEGIN_SRC emacs-lisp
  (use-package xclip
    :ensure t
    :init
    (xclip-mode 1))
#+END_SRC

Toggle fixed cursor on center with "C-M-l"

#+BEGIN_SRC emacs-lisp
  (use-package centered-cursor-mode
    :ensure t
    :bind ("C-M-l" . 'centered-cursor-mode))
#+END_SRC

Show colors automatically

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :hook prog-mode)
#+END_SRC

** Misc editing

Emacs treats camelCase as single word, this fixes it

#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC

Auto block pairs stuff

#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
  (setq electric-pair-pairs
        '((?\{ . ?\})
          (?\( . ?\))
          (?\[ . ?\])
          (?\" . ?\")
          ))
  (electric-pair-mode t)
#+END_SRC

** Revert Buffer

Update buffer from disk on <f5>

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f5>") '(lambda () (interactive) (revert-buffer t t)))
#+END_SRC

** Follow split buffer

From UncleDave

#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC

** Whitespace

Show trailing by default in prog-modes, but not elsewhere (minibuffer for instance)

#+BEGIN_SRC emacs-lisp
  (defun betafcc/whitespace-show-trailing ()
    (setq show-trailing-whitespace t))

  (defun betafcc/whitespace-toggle-show-trailing ()
    (interactive)
    (setq show-trailing-whitespace (not show-trailing-whitespace)))

  (add-hook 'prog-mode-hook 'betafcc/whitespace-show-trailing)
#+END_SRC

** Region bindings

Took from somewhere (don't remember where), probably I can refactor
the seemingly useless 'progn' block and 'bind-keys' inside config,
check if the reason is that older 'use-package' was like this or if
there is another reason

#+BEGIN_SRC emacs-lisp
(use-package region-bindings-mode
  :ensure t
  :config
  (progn
    ;; Do not activate `region-bindings-mode' in Special modes like `dired' and
    ;; `ibuffer'. Single-key bindings like 'm' are useful in those modes even
    ;; when a region is selected.
    (setq region-bindings-mode-disabled-modes '(dired-mode
                                                ibuffer-mode))

    (region-bindings-mode-enable)

    (defun modi/disable-rbm-deactivate-mark ()
      "Disable `region-bindings-mode' and deactivate mark."
      (interactive)
      (region-bindings-mode -1)
      (deactivate-mark)
      (message "Mark deactivated"))

    (bind-keys
     :map region-bindings-mode-map
      ("<C-SPC>" . modi/disable-rbm-deactivate-mark))))
#+END_SRC

** Multiple cursors


#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :bind (:map modi-mode-map
         ("C-S-c C-S-c" . mc/edit-lines)
         ("C->" . mc/mark-next-like-this)
         ("C-<" . mc/mark-previous-like-this)
         ("C-c C-<" . mc/mark-all-like-this)
         ("C-S-<mouse-1>" . mc/add-cursor-on-click))
  :bind (:map region-bindings-mode-map
         ("a" . mc/mark-all-like-this)
         ("p" . mc/mark-previous-like-this)
         ("n" . mc/mark-next-like-this)
         ("P" . mc/unmark-previous-like-this)
         ("N" . mc/unmark-next-like-this)
         ("[" . mc/cycle-backward)
         ("]" . mc/cycle-forward)
         ("m" . mc/mark-more-like-this-extended)
         ("h" . mc-hide-unmatched-lines-mode)
         ("\\" . mc/vertical-align-with-space)
         ("#" . mc/insert-numbers) ; use num prefix to set the starting number
         ("^" . mc/edit-beginnings-of-lines)
         ("$" . mc/edit-ends-of-lines))
  :init
  (progn
    ;; Temporary hack to get around bug # 28524 in emacs 26+
    ;; https://debbugs.gnu.org/cgi/bugreport.cgi?bug=28524
    (setq mc/mode-line
          `(" mc:" (:eval (format ,(propertize "%-2d" 'face 'font-lock-warning-face)
                                  (mc/num-cursors)))))

    (setq mc/list-file (locate-user-emacs-file "mc-lists"))

    ;; Disable the annoying sluggish matching paren blinks for all cursors
    ;; when you happen to type a ")" or "}" at all cursor locations.
    (defvar modi/mc-blink-matching-paren--store nil
      "Internal variable used to restore the value of `blink-matching-paren'
after `multiple-cursors-mode' is quit.")

    ;; The `multiple-cursors-mode-enabled-hook' and
    ;; `multiple-cursors-mode-disabled-hook' are run in the
    ;; `multiple-cursors-mode' minor mode definition, but they are not declared
    ;; (not `defvar'd). So do that first before using `add-hook'.
    (defvar multiple-cursors-mode-enabled-hook nil
      "Hook that is run after `multiple-cursors-mode' is enabled.")
    (defvar multiple-cursors-mode-disabled-hook nil
      "Hook that is run after `multiple-cursors-mode' is disabled.")

    (defun modi/mc-when-enabled ()
      "Function to be added to `multiple-cursors-mode-enabled-hook'."
      (setq modi/mc-blink-matching-paren--store blink-matching-paren)
      (setq blink-matching-paren nil))

    (defun modi/mc-when-disabled ()
      "Function to be added to `multiple-cursors-mode-disabled-hook'."
      (setq blink-matching-paren modi/mc-blink-matching-paren--store))

    (add-hook 'multiple-cursors-mode-enabled-hook #'modi/mc-when-enabled)
    (add-hook 'multiple-cursors-mode-disabled-hook #'modi/mc-when-disabled)))
#+END_SRC

** Symbol overlay

#+BEGIN_SRC emacs-lisp
  (use-package symbol-overlay
    :diminish
    :ensure t
    :bind (("M-i" . symbol-overlay-put)
           ("M-n" . symbol-overlay-jump-next)
           ("M-p" . symbol-overlay-jump-prev))
    :config
    (dolist (hook '(prog-mode-hook html-mode-hook yaml-mode-hook conf-mode-hook))
      (add-hook hook 'symbol-overlay-mode)))
#+END_SRC

* Org

Better 'unfold' symbol

#+BEGIN_SRC emacs-lisp
  (use-package org
    :mode ("\\.org\\'"  . org-mode)
    :config
    (setq org-ellipsis "â–¼"))
#+END_SRC

Visual indentation

#+BEGIN_SRC emacs-lisp
  (use-package org-indent
    :hook (org-mode . org-indent-mode))
#+END_SRC

Pretty bullets

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :hook (org-mode . org-bullets-mode))
#+END_SRC

Babel stuff

#+BEGIN_SRC emacs-lisp
  (use-package ob
    :no-require
    :defer t
    :config
    (setq org-confirm-babel-evaluate nil)
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python     . t)
       (emacs-lisp . t)
       (shell      . t)
       (js         . t))))
#+END_SRC

* Ivy, counsel, Swiper

Using Wiegley config for now

** Ivy

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :diminish
    :demand t

    :bind (("C-x b" . ivy-switch-buffer)
           ("C-x B" . ivy-switch-buffer-other-window)
           ("M-H"   . ivy-resume))

    :bind (:map ivy-minibuffer-map
                ("<tab>" . ivy-partial-or-done)
                ("<backtab>" . ivy-backward-kill-word)
                ("SPC"   . ivy-alt-done-or-space)
                ("C-d"   . ivy-done-or-delete-char)
                ("C-i"   . ivy-partial-or-done)
                ("C-r"   . ivy-previous-line-or-history)
                ("M-r"   . ivy-reverse-i-search))

    :bind (:map ivy-switch-buffer-map
                ("C-k" . ivy-switch-buffer-kill))

    :custom
    (ivy-dynamic-exhibit-delay-ms 200)
    (ivy-height 10)
    (ivy-initial-inputs-alist nil t)
    (ivy-magic-tilde nil)
    (ivy-re-builders-alist '((t . ivy--regex-ignore-order)))
    (ivy-use-virtual-buffers t)
    (ivy-wrap t)

    :preface
    (defun ivy-done-or-delete-char ()
      (interactive)
      (call-interactively
       (if (eolp)
           #'ivy-immediate-done
         #'ivy-delete-char)))

    (defun ivy-alt-done-or-space ()
      (interactive)
      (call-interactively
       (if (= ivy--length 1)
           #'ivy-alt-done
         #'self-insert-command)))

    (defun ivy-switch-buffer-kill ()
      (interactive)
      (debug)
      (let ((bn (ivy-state-current ivy-last)))
        (when (get-buffer bn)
          (kill-buffer bn))
        (unless (buffer-live-p (ivy-state-buffer ivy-last))
          (setf (ivy-state-buffer ivy-last)
                (with-ivy-window (current-buffer))))
        (setq ivy--all-candidates (delete bn ivy--all-candidates))
        (ivy--exhibit)))

    ;; This is the value of `magit-completing-read-function', so that we see
    ;; Magit's own sorting choices.
    (defun my-ivy-completing-read (&rest args)
      (let ((ivy-sort-functions-alist '((t . nil))))
        (apply 'ivy-completing-read args)))

    :config
    (ivy-mode 1)
    (ivy-set-occur 'ivy-switch-buffer 'ivy-switch-buffer-occur))

  (use-package ivy-hydra
    :ensure t
    :after (ivy hydra)
    :defer t)

(use-package ivy-rich
  :after ivy
  :ensure t
  :demand t
  :config
  (ivy-rich-mode 1)
  (setq ivy-virtual-abbreviate 'full
        ivy-rich-switch-buffer-align-virtual-buffer t
        ivy-rich-path-style 'abbrev))

#+END_SRC

** Counsel

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :after ivy
    :demand t
    :diminish
    :custom (counsel-find-file-ignore-regexp
             (concat "\\(\\`\\.[^.]\\|"
                     (regexp-opt completion-ignored-extensions)
                     "\\'\\)"))
    :bind (("C-*"     . counsel-org-agenda-headlines)
           ("C-x C-f" . counsel-find-file)
           ("C-c e l" . counsel-find-library)
           ("C-c e q" . counsel-set-variable)
;;           ("C-h e l" . counsel-find-library)
;;           ("C-h e u" . counsel-unicode-char)
           ("C-h f"   . counsel-describe-function)
           ("C-x r b" . counsel-bookmark)
           ("M-x"     . counsel-M-x)
           ;; ("M-y"     . counsel-yank-pop)

           ("M-s f" . counsel-file-jump)
           ("M-s g" . counsel-rg)
           ("M-s j" . counsel-dired-jump))
    :commands counsel-minibuffer-history
    :init
    (bind-key "M-r" #'counsel-minibuffer-history minibuffer-local-map)
    :config
    (add-to-list 'ivy-sort-matches-functions-alist
                 '(counsel-find-file . ivy--sort-files-by-date))

    (defun counsel-recoll-function (string)
      "Run recoll for STRING."
      (if (< (length string) 3)
          (counsel-more-chars 3)
        (counsel--async-command
         (format "recollq -t -b %s"
                 (shell-quote-argument string)))
        nil))

    (defun counsel-recoll (&optional initial-input)
      "Search for a string in the recoll database.
    You'll be given a list of files that match.
    Selecting a file will launch `swiper' for that file.
    INITIAL-INPUT can be given as the initial minibuffer input."
      (interactive)
      (counsel-require-program "recollq")
      (ivy-read "recoll: " 'counsel-recoll-function
                :initial-input initial-input
                :dynamic-collection t
                :history 'counsel-git-grep-history
                :action (lambda (x)
                          (when (string-match "file://\\(.*\\)\\'" x)
                            (let ((file-name (match-string 1 x)))
                              (find-file file-name)
                              (unless (string-match "pdf$" x)
                                (swiper ivy-text)))))
                :unwind #'counsel-delete-process
                :caller 'counsel-recoll)))

  (use-package counsel-dash
    :ensure t
    :bind ("C-c C-h" . counsel-dash))
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :after ivy
    :bind (:map swiper-map
                ("DEL" . delete-backward-char)
                ("M-y" . yank)
                ("M-%" . swiper-query-replace)
                ("C-." . swiper-avy)
                ("M-c" . swiper-mc))
    :bind (:map isearch-mode-map
                ("C-o" . swiper-from-isearch)))
#+END_SRC


*** TODO [0/1]
- [ ] change swiper prompt (now is "Swipper")

* Dash

#+BEGIN_SRC emacs-lisp
  (use-package dash
    :ensure t)
#+END_SRC

*** Todo [0/1]
- [ ] Learn to use this shit

* Elm

Unbelievably easy setup

#+BEGIN_SRC emacs-lisp
  (use-package elm-mode
    :ensure t)
#+END_SRC

* Shell scripts
#+BEGIN_SRC emacs-lisp
  (use-package sh-script
    :init
    (setq sh-basic-offset 2))
#+END_SRC
* Misc
#+BEGIN_SRC emacs-lisp

#+END_SRC
* References

- [[https://github.com/purcell/emacs.d][purcell]]
- [[https://github.com/kaushalmodi/.emacs.d][kaushalmodi]]
- [[https://github.com/jwiegley/dot-emacs][jwiegley]]

